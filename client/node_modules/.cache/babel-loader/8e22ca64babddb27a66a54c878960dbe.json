{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, CLEAR_CONTACTS, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from \"../types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, \"g\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["F:/ReactWork/contact-manager-master/client/src/context/contacts/ContactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","CLEAR_CONTACTS","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","state","action","type","contacts","payload","loading","current","map","contact","_id","filter","filtered","error","regex","RegExp","name","match","email"],"mappings":"AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,WALF,EAMEC,aANF,EAOEC,cAPF,EAQEC,eARF,EASEC,YATF,EAUEC,aAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,YAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFZ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,QAA1B,CAFL;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKX,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELM,QAAAA,OAAO,EAAEL,MAAM,CAACG;AAFX,OAAP;;AAIF,SAAKT,aAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELM,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKV,cAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeI,GAAf,CAAoBC,OAAD,IAC3BA,OAAO,CAACC,GAAR,KAAgBR,MAAM,CAACG,OAAP,CAAeK,GAA/B,GAAqCR,MAAM,CAACG,OAA5C,GAAsDI,OAD9C,CAFL;AAKLH,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKb,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,MAAf,CACPF,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBR,MAAM,CAACG,OAD5B,CAFL;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELG,QAAAA,QAAQ,EAAE,IAFL;AAGLQ,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,KAAK,EAAE,IAJF;AAKLN,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKT,eAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELW,QAAAA,QAAQ,EAAEX,KAAK,CAACG,QAAN,CAAeO,MAAf,CAAuBF,OAAD,IAAa;AAC3C,gBAAMK,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAAgC,GAAhC,CAAd;AACA,iBAAOI,OAAO,CAACO,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BL,OAAO,CAACS,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKf,YAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELW,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF,SAAKZ,aAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELY,QAAAA,KAAK,EAAEX,MAAM,CAACG;AAFT,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAlEJ;AAoED,CArED","sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  CLEAR_CONTACTS,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false,\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false,\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact._id === action.payload._id ? action.payload : contact\n        ),\n        loading: false,\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact._id !== action.payload\n        ),\n        loading: false,\n      };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null,\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter((contact) => {\n          const regex = new RegExp(`${action.payload}`, \"g\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}