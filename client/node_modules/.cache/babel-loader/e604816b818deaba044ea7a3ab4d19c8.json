{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactWork\\\\contact-manager-master\\\\client\\\\src\\\\components\\\\contacts\\\\Contacts.js\";\nimport React, { Fragment, useState, useContext, useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport ContactContext from \"../../context/contacts/contactContext\";\nimport Spinner from \"../layout/Spinner\";\nimport ContactItem from \"./ContactItem\";\nimport ContactFilter from \"./ContactFilter\";\nconst favoriteStyle = {\n  backgroundColor: 'white',\n  color: 'black',\n  border: '2px solid #4CAF50'\n};\n\nconst Contacts = () => {\n  const contactContext = useContext(ContactContext);\n  const {\n    contacts,\n    filtered,\n    getContacts,\n    loading\n  } = contactContext;\n  const [favorite, setFavorite] = useState(false);\n  useEffect(() => {\n    getContacts(); //eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    style: favoriteStyle,\n    onClick: event => setFavorite(!favorite),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \" \", favorite ? \"Show All\" : \"Favorite\"), contacts !== null && !loading ? /*#__PURE__*/React.createElement(TransitionGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, filtered != null ? filtered.map(contact => /*#__PURE__*/React.createElement(CSSTransition, {\n    key: contact._id,\n    timeout: 500,\n    classNames: \"item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ContactItem, {\n    contact: contact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }))) : contacts.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Pleas add Contact.\") : favorite ? contacts.map(contact => contact.favorite && /*#__PURE__*/React.createElement(CSSTransition, {\n    key: contact._id,\n    timeout: 500,\n    classNames: \"item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 35\n    }\n  }, /*#__PURE__*/React.createElement(ContactItem, {\n    contact: contact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }))) : contacts.map(contact => /*#__PURE__*/React.createElement(CSSTransition, {\n    key: contact._id,\n    timeout: 500,\n    classNames: \"item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ContactItem, {\n    contact: contact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  })))) : /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Contacts;","map":{"version":3,"sources":["F:/ReactWork/contact-manager-master/client/src/components/contacts/Contacts.js"],"names":["React","Fragment","useState","useContext","useEffect","CSSTransition","TransitionGroup","ContactContext","Spinner","ContactItem","ContactFilter","favoriteStyle","backgroundColor","color","border","Contacts","contactContext","contacts","filtered","getContacts","loading","favorite","setFavorite","event","map","contact","_id","length"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useContext, useEffect} from \"react\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\nimport ContactContext from \"../../context/contacts/contactContext\";\nimport Spinner from \"../layout/Spinner\";\nimport ContactItem from \"./ContactItem\";\nimport ContactFilter from \"./ContactFilter\";\n\nconst favoriteStyle = {\n  backgroundColor: 'white',\n  color: 'black',\n  border: '2px solid #4CAF50',\n}\n\nconst Contacts = () => {\n  const contactContext = useContext(ContactContext);\n  const {contacts, filtered, getContacts, loading} = contactContext;\n  const [favorite, setFavorite] = useState(false)\n\n  useEffect(() => {\n    getContacts();\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <Fragment>\n      <button style={favoriteStyle}  onClick={(event => setFavorite(!favorite) )} > {favorite ? \"Show All\" : \"Favorite\"}</button>\n      {contacts !== null && !loading ? (\n        <TransitionGroup>\n          {filtered != null ? (\n            filtered.map((contact) => (\n              <CSSTransition key={contact._id} timeout={500} classNames=\"item\">\n                <ContactItem contact={contact} />\n              </CSSTransition>\n            ))\n          ) : contacts.length === 0 ? (\n            <div className=\"text-primary\">Pleas add Contact.</div>\n          ) : (\n            favorite ?\n            contacts.map((contact) => (\n              contact.favorite && <CSSTransition key={contact._id} timeout={500} classNames=\"item\">\n                <ContactItem contact={contact} />\n              </CSSTransition>\n            )) :\n             contacts.map((contact) => (\n              <CSSTransition key={contact._id} timeout={500} classNames=\"item\">\n                <ContactItem contact={contact} />\n              </CSSTransition>\n              )) \n          )}\n        </TransitionGroup>\n      ) : (\n        <Spinner />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Contacts;\n"]},"metadata":{},"sourceType":"module"}